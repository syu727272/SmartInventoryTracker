イベント検索アプリ 設計書
1. アプリケーション概要
東京都内（八王子まで、奥多摩・離島を除く）のイベント情報を検索できるアプリケーションです。ユーザーは指定した日付範囲のイベントを検索し、気に入ったイベントをお気に入り登録できます。日本語をデフォルトとし、英語表示にも対応します。
2. 技術スタック
フロントエンド: TypeScript, React (または Vue.js など、UIフレームワークを検討)
バックエンド: Go
データベース: PostgreSQL
3. 機能一覧
イベント検索機能:
日付範囲指定による検索
地区（分割されたエリア）による絞り込み検索
検索結果のリスト表示（初期表示10件、下スクロールで追加読み込み）
ログイン機能:
ユーザー登録
ログイン
ログアウト
お気に入り機能:
イベントのお気に入り登録
お気に入りイベントの一覧表示
多言語対応:
デフォルト言語：日本語
対応言語：英語
言語切り替え機能
エラーページ表示:
404 Not Found
500 Internal Server Error
その他、APIエラーなど
管理機能 (将来的な拡張):
地区情報の管理
イベント情報の管理 (Perplexity APIからの取得状況監視など)
4. API連携
PERPLEXITY API:
日付検索の時点でイベントを網羅的に検索します。お気に入りの登録時点で、イベントの開催日時を検索します。１日開催、２か月開催など。
イベント検索APIを利用します。
APIキーは Secret Manager 等で安全に管理します。
問い合わせパラメータは JSON 形式で構築し、APIに送信します。
パラメータ例:
 JSON

{
  "query": "東京都 イベント",
  "date_from": "YYYY-MM-DD",
  "date_to": "YYYY-MM-DD",
  "area": "新宿区" // 分割された地区の名称
}



API エンドポイント (バックエンド):
/api/events: イベント検索 (GET)
/api/login: ログイン (POST)
/api/register: ユーザー登録 (POST)
/api/logout: ログアウト (POST)
/api/favorites: お気に入りイベント一覧取得 (GET)
/api/favorites/{event_id}: お気に入り登録/解除 (POST/DELETE)
5. データベース設計
5.1. users テーブル
カラム名
型
説明
id
SERIAL
ユーザーID (主キー)
username
VARCHAR(255)
ユーザー名 (ユニーク)
password_hash
VARCHAR(255)
パスワードのハッシュ値
created_at
TIMESTAMP
作成日時
updated_at
TIMESTAMP
更新日時


5.2. favorites テーブル
カラム名
型
説明
id
SERIAL
お気に入りID (主キー)
user_id
INTEGER
ユーザーID (外部キー, users テーブル)
event_id
VARCHAR(255)
PERPLEXITY API からのイベントID (仮定)
created_at
TIMESTAMP
作成日時
updated_at
TIMESTAMP
更新日時
制約: user_id + event_id でユニーク


同じイベントを複数回お気に入り登録できないようにする

Google スプレッドシートにエクスポート
5.3. districts テーブル (地区分割管理用)
カラム名
型
説明
id
SERIAL
地区ID (主キー)
name_ja
VARCHAR(255)
地区名 (日本語)
name_en
VARCHAR(255)
地区名 (英語)
parent_area
VARCHAR(255)
親エリア (例: 23区, その他)
display_order
INTEGER
表示順

Google スプレッドシートにエクスポート
6. 地域分割
東京都23区: 以下の5つ程度のエリアに分割します (例):
都心エリア (千代田区、中央区、港区)
新宿・渋谷エリア (新宿区、渋谷区)
池袋・上野エリア (豊島区、台東区)
城南エリア (品川区、目黒区、大田区)
城北・城東エリア (その他23区)
その他 (八王子まで): 以下の3つ程度のエリアに分割します (例):
多摩西部 (八王子市、立川市など)
多摩南部 (町田市など)
多摩北部 (府中市など)
districts テーブルにこれらの情報を格納し、ユーザーが選択できるようにします。
7. ユーザーインターフェース (UI)
イベント検索画面:
日付選択カレンダー (開始日、終了日)
地区選択ドロップダウン (日本語/英語表示切り替えに対応)
検索ボタン
検索結果表示エリア (初期表示10件、スクロールで追加読み込み)
ログイン・登録画面:
ユーザー名入力フォーム
パスワード入力フォーム
ログインボタン
登録ボタンへのリンク
お気に入り画面:
お気に入り登録したイベントの一覧表示
エラーページ:
エラー内容に応じたメッセージ表示
トップページへのリンクなど
8. 実装詳細
フロントエンド:
TypeScript で型安全な開発を行います。
React (または Vue.js) を用いてコンポーネントベースのUIを構築します。
APIとの通信には Workspace API または Axios などのライブラリを使用します。
無限スクロールの実装には Intersection Observer API などを検討します。
国際化 (i18n) ライブラリを用いて多言語対応を行います。
バックエンド:
Go の標準ライブラリまたは Gin, Echo などのフレームワークを使用します。
PostgreSQL への接続には database/sql パッケージと適切なドライバを使用します。
PERPLEXITY API との通信処理を実装します。
ユーザー認証には JWT (JSON Web Tokens) などを利用します。
API のリクエスト/レスポンスの型定義を明確に行います。
データベース:
適切なインデックスを設定し、検索パフォーマンスを向上させます。
スキーマ定義は Flyway や Goose などのマイグレーションツールで管理します。
9. ドキュメント
Readme: アプリケーションの概要、起動方法、開発環境構築手順などを記述します。
ユニットテスト: 各機能の単体テストコードを記述し、品質を保証します。
仕様書: より詳細な機能仕様、API仕様、データモデルなどを記述します。

10. 将来的には同じイベントをLLMで判定して重複を削除します。その機能を妨げないように開発してください


